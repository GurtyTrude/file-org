import os
import pandas as pd
import tkinter as tk
from tkinter import filedialog, messagebox
from datetime import datetime

def rename_files_from_excel(excel_path, target_folder, file_extension):
    """
    Renames files based on Excel file with columns: 'Prefix' and 'Filename' (no extension).
    Saves a log of actions taken to the same folder as the Excel file.
    """
    try:
        df = pd.read_excel(excel_path)

        if 'Prefix' not in df.columns or 'Filename' not in df.columns:
            raise ValueError("Excel must contain 'Prefix' and 'Filename' columns.")

        log_entries = []

        for _, row in df.iterrows():
            prefix = str(row['Prefix']).strip()
            base_name = str(row['Filename']).strip()
            original_name = base_name + file_extension
            original_path = os.path.join(target_folder, original_name)
            new_name = f"{prefix}-{base_name}{file_extension}"
            new_path = os.path.join(target_folder, new_name)
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            if os.path.isfile(original_path):
                try:
                    os.rename(original_path, new_path)
                    log_entries.append([timestamp, original_name, new_name, "Renamed"])
                except Exception as e:
                    log_entries.append([timestamp, original_name, new_name, f"Error: {e}"])
            else:
                log_entries.append([timestamp, original_name, "", "File not found"])

        # Save log to Excel
        log_df = pd.DataFrame(log_entries, columns=["Timestamp", "Original Name", "New Name", "Status"])
        log_filename = f"rename_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        log_path = os.path.join(os.path.dirname(excel_path), log_filename)
        log_df.to_excel(log_path, index=False)

        # Summary popup
        renamed = len([entry for entry in log_entries if entry[3] == "Renamed"])
        failed = len(log_entries) - renamed
        summary = f"âœ” Files renamed: {renamed}\nâš  Issues: {failed}\n\nðŸ“„ Log saved to:\n{log_path}"
        messagebox.showinfo("Rename Summary", summary)

    except Exception as e:
        messagebox.showerror("Error", f"An error occurred:\n{e}")

def generate_excel_template():
    """
    Saves an Excel file with sample data for user to fill in.
    """
    save_path = filedialog.asksaveasfilename(
        defaultextension=".xlsx",
        filetypes=[("Excel files", "*.xlsx")],
        title="Save Excel Template As"
    )
    if not save_path:
        return

    df = pd.DataFrame({
        "Prefix": ["1", "2"],
        "Filename": ["PDF-A", "PDF-B"]
    })

    try:
        df.to_excel(save_path, index=False)
        messagebox.showinfo("Template Created", f"Excel template saved to:\n{save_path}")
    except Exception as e:
        messagebox.showerror("Error", f"Could not save file:\n{e}")

def pick_excel_folder_and_extension():
    """
    Launches GUI for selecting Excel file, target folder, and file extension.
    """
    root = tk.Tk()
    root.title("File Renamer")
    root.geometry("400x250")
    root.resizable(False, False)

    file_ext = tk.StringVar(value=".pdf")

    def start_process():
        ext = file_ext.get()

        excel_path = filedialog.askopenfilename(
            title="Select Excel File",
            filetypes=[("Excel files", "*.xlsx *.xls")]
        )
        if not excel_path:
            messagebox.showinfo("Cancelled", "No Excel file selected.")
            return

        folder_path = filedialog.askdirectory(title="Select Folder with Files to Rename")
        if not folder_path:
            messagebox.showinfo("Cancelled", "No folder selected.")
            return

        root.withdraw()
        rename_files_from_excel(excel_path, folder_path, ext)
        root.destroy()

    # Widgets
    tk.Label(root, text="Select the file type to rename:").pack(pady=10)
    options = [".pdf", ".docx", ".txt", ".xlsx", ".jpg", ".png"]
    tk.OptionMenu(root, file_ext, *options).pack()

    tk.Button(root, text="Continue", command=start_process).pack(pady=10)
    tk.Button(root, text="Create Excel Template", command=generate_excel_template).pack(pady=5)

    root.mainloop()

if __name__ == "__main__":
    pick_excel_folder_and_extension()
